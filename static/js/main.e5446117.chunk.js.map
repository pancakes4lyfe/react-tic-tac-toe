{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","id","onClick","onClickCallback","value","Board","squares","squareList","squaresFlatList","row","square","push","class","generateSquareComponents","generateSquares","currentId","col","App","useState","setSquares","turn","setTurn","winner","setWinner","boardStatus","setBoardStatus","playerX","setPlayerX","playerO","setPlayerO","changePlayer","event","target","i","fullBoard","checkForWinner","type","onChange","squareId","squareValue","console","log","updatedSquare","updatedSquaresData","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRA4BeA,G,kBAvBA,SAACC,GASd,OAAO,wBACLC,UAAWD,EAAMC,UAAWC,GAAIF,EAAME,GAAIC,QALtB,WACpBH,EAAMI,gBAAgBJ,EAAME,GAAIF,EAAMK,QAGjC,SAIJL,EAAMK,UCsBIC,EApBD,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAASH,EAAgC,EAAhCA,gBAAiBH,EAAe,EAAfA,UACnCO,EAfyB,SAACD,EAASH,GAKzC,IAL6D,EAKvDK,EAAkB,GALqC,cAM7CF,GAN6C,IAM7D,2BAAyB,CAAC,IAAD,EAAhBG,EAAgB,sBACJA,GADI,IACvB,2BAAwB,CAAC,IAAhBC,EAAe,QACtBF,EAAgBG,KAAK,cAAC,EAAD,CAAwBV,GAAIS,EAAOT,GAAIG,MAAOM,EAAON,MAAOJ,UAAWU,EAAOE,MAAOT,gBAAiBA,GAAzFO,EAAOT,MAFpB,gCANoC,8BAW7D,OAAOO,EAIYK,CAAyBP,EAASH,GAErD,OAAO,qBAAKH,UAAWA,EAAhB,SACJO,KChBCO,EAAkB,WAKtB,IAJA,IAAMR,EAAU,GAEZS,EAAY,EAEPN,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CACnCH,EAAQK,KAAK,IACb,IAAK,IAAIK,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAChCV,EAAQG,GAAKE,KAAK,CAChBV,GAAIc,EACJX,MAAO,GACPQ,MAAO,WAETG,GAAa,EAIjB,OAAOT,GAmJMW,EAhJH,WAAM,MAGcC,mBAASJ,KAHvB,mBAGTR,EAHS,KAGAa,EAHA,OAIQD,mBA3BT,KAuBC,mBAITE,EAJS,KAIHC,EAJG,OAKWH,mBAAS,IALpB,mBAKVI,EALU,KAKFC,EALE,OAMqBL,mBAAS,QAN9B,mBAMVM,EANU,KAMGC,EANH,OAOaP,mBAAS,YAPtB,mBAOVQ,EAPU,KAODC,EAPC,OAQaT,mBAAS,YARtB,mBAQVU,EARU,KAQDC,EARC,KAWVC,EAAe,SAACC,GACW,MAA3BA,EAAMC,OAAOhC,UACf2B,EAAWI,EAAMC,OAAO5B,OAExByB,EAAWE,EAAMC,OAAO5B,QA6FvBkB,GA1DkB,WAUrB,IAV2B,EAUvBA,EAAS,GAVc,cAWXhB,GAXW,IAW3B,2BAAwB,CAAC,IAAhBG,EAAe,QAClBA,EAAI,GAAGL,QAAUK,EAAI,GAAGL,OAASK,EAAI,GAAGL,QAAUK,EAAI,GAAGL,OAA0B,KAAjBK,EAAI,GAAGL,QAC3EkB,EAAUb,EAAI,GAAGL,MACjBK,EAAI,GAAGG,MAAQ,aACfH,EAAI,GAAGG,MAAQ,aACfH,EAAI,GAAGG,MAAO,eAhBS,8BAmB3B,IAAK,IAAIqB,EAAI,EAAGA,EAAI,EAAGA,IACjB3B,EAAQ,GAAG2B,GAAG7B,QAAUE,EAAQ,GAAG2B,GAAG7B,OAASE,EAAQ,GAAG2B,GAAG7B,QAAUE,EAAQ,GAAG2B,GAAG7B,OAAiC,KAAxBE,EAAQ,GAAG2B,GAAG7B,QAC9GkB,EAAShB,EAAQ,GAAG2B,GAAG7B,MACvBE,EAAQ,GAAG2B,GAAGrB,MAAQ,aACtBN,EAAQ,GAAG2B,GAAGrB,MAAQ,aACtBN,EAAQ,GAAG2B,GAAGrB,MAAO,cAGrBN,EAAQ,GAAG,GAAGF,QAAUE,EAAQ,GAAG,GAAGF,OAASE,EAAQ,GAAG,GAAGF,QAAUE,EAAQ,GAAG,GAAGF,OAAiC,KAAxBE,EAAQ,GAAG,GAAGF,QAC9GkB,EAAShB,EAAQ,GAAG,GAAGF,MACvBE,EAAQ,GAAG,GAAGM,MAAQ,aACtBN,EAAQ,GAAG,GAAGM,MAAQ,aACtBN,EAAQ,GAAG,GAAGM,MAAO,cAEnBN,EAAQ,GAAG,GAAGF,QAAUE,EAAQ,GAAG,GAAGF,OAASE,EAAQ,GAAG,GAAGF,QAAUE,EAAQ,GAAG,GAAGF,OAAiC,KAAxBE,EAAQ,GAAG,GAAGF,QAC9GkB,EAAShB,EAAQ,GAAG,GAAGF,MACvBE,EAAQ,GAAG,GAAGM,MAAQ,aACtBN,EAAQ,GAAG,GAAGM,MAAQ,aACtBN,EAAQ,GAAG,GAAGM,MAAO,cAEvB,IAvC2B,EAuCvBsB,GAAY,EAvCW,cAwCX5B,GAxCW,IAwC3B,2BAAyB,CAAC,IAAD,EAAhBG,EAAgB,sBACJA,GADI,IACvB,2BAAwB,QACVL,QACV8B,GAAY,GAHO,gCAxCE,8BAgDvBA,IAAcZ,IAChBA,EAAS,MACTG,EAAe,aAGbH,GACFC,EAAUD,GAKZa,GAcF,OACE,sBAAKnC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,mDACA,sBAAKA,UAAU,UAAf,UACE,uCACA,uBAAOoC,KAAK,OAAOhC,MAAOsB,EAAS1B,UAAU,IAAIqC,SAAUP,IAC3D,uCACA,uBAAOM,KAAK,OAAOhC,MAAOwB,EAAS5B,UAAU,IAAIqC,SAAUP,OAE7D,+BAAKJ,EAAL,QAAmBE,KACnB,4CAAeN,KACf,wBAAQpB,QAtBI,WAEhBiB,EAAWL,KACXO,EA3Ia,KA4IbE,EAAU,IACVE,EAAe,QACfE,EAAW,YACXE,EAAW,aAeP,2BAEF,+BACE,cAAC,EAAD,CAAOvB,QAASA,EAASH,gBAnHX,SAACmC,EAAUC,GAC7B,GAAIjB,EACFkB,QAAQC,IAAI,yBACP,GAAIF,EACTC,QAAQC,IAAI,wBACP,CACL,IAAMC,EAAgB,CAACzC,GAAGqC,EAAUlC,MAAMgB,EAAMR,MAAM,UAChD+B,EAAqBrC,EAAQsC,KAAI,SAAAnC,GACrC,OAAOA,EAAImC,KAAI,SAAAlC,GACb,OAAIA,EAAOT,KAAOqC,EACTI,EAEAhC,QAIbS,EAAWwB,GAGTtB,EADW,MAATD,EA/DO,IADA,OAiK8CpB,UAAWwB,UC1JtDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.e5446117.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n\n  const onSquareClick = () => {\n    props.onClickCallback(props.id, props.value);\n  };\n\n  return <button\n    className={props.className} id={props.id} onClick={onSquareClick} \n    // disabled={props.value}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  // squares is a 2D Array, but \n  //  you need to return a 1D array\n  //  of square components\n  const squaresFlatList = [];\n  for (let row of squares) {\n    for (let square of row) {\n      squaresFlatList.push(<Square key={square.id} id={square.id} value={square.value} className={square.class} onClickCallback={onClickCallback}></Square>);\n    }\n  }\n  return squaresFlatList;\n}\n\nconst Board = ({ squares, onClickCallback, className}) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  // console.log(squareList);\n  return <div className={className} >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n        class: 'square'\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [turn, setTurn] = useState(PLAYER_1);\n  const[winner, setWinner] = useState('');\n  const[boardStatus, setBoardStatus] = useState('grid');\n  const[playerX, setPlayerX] = useState('Player X');\n  const[playerO, setPlayerO] = useState('Player O');\n\n  // Is called when player input is modified\n  const changePlayer = (event) => {\n    if (event.target.className === 'X') {\n      setPlayerX(event.target.value);\n    } else {\n      setPlayerO(event.target.value);\n    }\n  }\n\n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n  const handleClick = (squareId, squareValue) => {\n    if (winner) {\n      console.log('Nope, game over!');\n    } else if (squareValue) {\n      console.log('Already Clicked!');\n    } else {\n      const updatedSquare = {id:squareId, value:turn, class:'square'};\n      const updatedSquaresData = squares.map(row => {\n        return row.map(square => {\n          if (square.id === squareId) {\n            return updatedSquare;\n          } else {\n            return square;\n          }\n        });\n      });\n      setSquares(updatedSquaresData);\n      \n      if (turn === 'x') {\n        setTurn(PLAYER_2);\n      } else {\n        setTurn(PLAYER_1);\n      }\n    }\n  }\n\n\n  const checkForWinner = () => {\n    // Complete in Wave 3\n    // You will need to:\n    // 1. Go accross each row to see if \n    //    3 squares in the same row match\n    //    i.e. same value\n    // 2. Go down each column to see if\n    //    3 squares in each column match\n    // 3. Go across each diagonal to see if \n    //    all three squares have the same value.\n    let winner = '';\n    for (let row of squares){\n      if (row[0].value === row[1].value && row[0].value === row[2].value && row[0].value !== ''){\n        winner = (row[0].value);\n        row[0].class = 'red-square';\n        row[1].class = 'red-square';\n        row[2].class= 'red-square';\n      }       \n    }\n    for (let i = 0; i < 3; i++) {\n      if (squares[0][i].value === squares[1][i].value && squares[0][i].value === squares[2][i].value && squares[0][i].value !== '') {\n        winner = squares[0][i].value;\n        squares[0][i].class = 'red-square';\n        squares[1][i].class = 'red-square';\n        squares[2][i].class= 'red-square';\n      }\n    }\n    if (squares[0][0].value === squares[1][1].value && squares[0][0].value === squares[2][2].value && squares[0][0].value !== '') {\n      winner = squares[1][1].value;\n      squares[0][0].class = 'red-square';\n      squares[1][1].class = 'red-square';\n      squares[2][2].class= 'red-square';\n    }\n    if (squares[0][2].value === squares[1][1].value && squares[0][2].value === squares[2][0].value && squares[0][2].value !== '') {\n      winner = squares[1][1].value;\n      squares[0][2].class = 'red-square';\n      squares[1][1].class = 'red-square';\n      squares[2][0].class= 'red-square';\n    }\n    let fullBoard = true;\n    for (let row of squares) {\n      for (let square of row) {\n        if (!square.value) {\n          fullBoard = false;\n        }\n      }\n    }\n    // Checks for a tie\n    if (fullBoard && !winner) {\n      winner = 'TIE';\n      setBoardStatus('tieBoard');\n    }\n\n    if (winner) {\n      setWinner(winner);\n    }\n  }\n\n  if (!winner) {\n    checkForWinner();\n  } \n  \n\n  const resetGame = () => {\n    // Complete in Wave 4\n    setSquares(generateSquares());\n    setTurn(PLAYER_1);\n    setWinner('');\n    setBoardStatus('grid');\n    setPlayerX('Player X');\n    setPlayerO('Player O');\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <div className='Players'>\n          <label>X:</label>\n          <input type='text' value={playerX} className='X' onChange={changePlayer} />\n          <label>O:</label>\n          <input type='text' value={playerO} className='O' onChange={changePlayer} />\n        </div>\n        <h2>{playerX} vs. {playerO}</h2>\n        <h3>Winner is {winner}</h3>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={handleClick} className={boardStatus} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}